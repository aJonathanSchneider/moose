openapi: "3.0.0"
info:
  version: 1.0.0
  title: Moose API
  license:
    name: MIT
servers:
  - url: http://localhost:8080
paths:
  /timeblocks:
    get:
      summary: List all timeblocks
      operationId: listTimeBlocks
      tags:
        - timeblocks
      parameters:
        - name: since
          in: query
          description: from when to start querying, including that date
          required: false
          schema:
            type: string
            format: date-time
      responses:
        200:
          description: A paged array of timeblocks
          headers:
            x-next:
              description: A link to the next page of responses
              schema:
                type: string
          content:
            application/json:    
              schema:
                $ref: "#/components/schemas/ApiResultOkGetTimeBlocks"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResultError"
    post:
      summary: Create a timeblock
      operationId: createTimeBlock
      tags:
        - timeblocks
      responses:
        200:
          description: A newly created User
          content:
            application/json:    
              schema:
                $ref: "#/components/schemas/ApiResultOkPostTimeblocks"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResultError"
  /timeblocks/{id}:
    get:
      summary: Info for a specific timeblock
      operationId: showTimeBlockById
      tags:
        - timeblocks
      parameters:
        - name: id
          in: path
          required: true
          description: The id of the timeBlock to retrieve
          schema:
            type: string
      responses:
        200:
          description: Expected response to a valid request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResultOkGetTimeBlock"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResultError"
    put:
      summary: updates timeblock by id
      operationId: updateTimeBlockById
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        description: the timeblock to be updated
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TimeBlock'
      responses:
        200:
          description: timeblock update
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResultOkPutTimeBlocks'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResultError"
    delete:
      summary: deletes timeblock by id
      operationId: deleteTimeBlockById
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        204:
          description: timeblock deleted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResultOkDeleteTimeBlocks'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResultError"
  /users:
    get:
      summary: List all users
      operationId: listUsers
      tags:
        - users
      responses:
        200:
          description: An array of all users
          content:
            application/json:    
              schema:
                $ref: "#/components/schemas/ApiResultOkGetUsers"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResultError"
    post:
      summary: Create a user
      operationId: createUser
      requestBody:
        description: the user to be created
        content:
            application/json:
              schema:
                $ref: "#/components/schemas/NewUser"
              examples:
                success:
                  summary: Example of successful user creation
                  value:
                    id: 1
                    username: 'Herbert'
                    lastLogin: '2019-05-25 11:23'
                error:
                  summary: Example of an already exists error response
                  value:
                    errorCode: "00002"
                    errorMsg: "duplicated account already exist"
      tags:
        - users
      responses:
        200:
          description: user successfully created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResultOkPostUsers'
        422:
          description: user with that name already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResultError'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResultError"
  /users/{id}:
    get:
      summary: Info about a user
      operationId: showUserById
      tags:
        - users
      parameters:
        - name: id
          in: path
          required: true
          description: The id of the user to retrieve
          schema:
            type: string
      responses:
        200:
          description: Expected response to a valid request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResultOkGetUser"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResultError"
    put:
      summary: updates user by id
      operationId: updateUserById
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        description: the user to be updated
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        200:
          description: user update
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResultOkPutUsers'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResultError"
    delete:
      summary: deletes user by id
      operationId: deleteUserById
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        204:
          description: user deleted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResultOkDeleteUsers'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResultError"

components:
  schemas:
    NewUser:
      type: object
      required:
        - username
      properties:
        username:
          type: string
    User:
      type: object
      allOf:
        - $ref: '#/components/schemas/NewUser'
      required:
        - id
      properties:
        id:
          type: integer
          format: int64
        lastLogin:
          type: string
    Users:
      type: array
      items:
        $ref: "#/components/schemas/User"
    TimeBlock:
      required:
        - from
        - to
      properties:
        id:
          type: integer
          format: int64
        from:
          type: string
          format: date-time
        to:
          type: string
          format: date-time
        description:
          type: string
        projectid:
          type: string
    TimeBlocks:
      type: array
      items:
        $ref: "#/components/schemas/TimeBlock"
    # -- Wrapper Section --
    # OK response types, which should be generic
    ## timeblocks
    ### CRUD
    ApiResultOkPostTimeblocks:
      allOf:
        - $ref: '#/components/schemas/ApiResultOk'
        - properties:
            result:
              $ref: '#/components/schemas/TimeBlock'
    ApiResultOkGetTimeBlock:
      allOf:
        - $ref: '#/components/schemas/ApiResultOk'
        - properties:
            result:
              $ref: '#/components/schemas/TimeBlock'
    ApiResultOkPutTimeBlocks:
      allOf:
        - $ref: '#/components/schemas/ApiResultOk'
        - properties:
            result:
              $ref: '#/components/schemas/TimeBlock'
    ApiResultOkDeleteTimeBlocks:
      allOf:
        - $ref: '#/components/schemas/ApiResultOk'
        - properties:
            result:
              $ref: '#/components/schemas/ApiSubDeleteOk'
    ### list / search
    ApiResultOkGetTimeBlocks:
      allOf:
        - $ref: '#/components/schemas/ApiResultOk'
        - properties:
            result:
              $ref: '#/components/schemas/TimeBlocks'
    ## users
    ### CRUD
    ApiResultOkPostUsers:
      allOf:
        - $ref: '#/components/schemas/ApiResultOk'
        - properties:
            result:
              $ref: '#/components/schemas/User'
    ApiResultOkGetUser:
      allOf:
        - $ref: '#/components/schemas/ApiResultOk'
        - properties:
            result:
              $ref: '#/components/schemas/User'
    ApiResultOkPutUsers:
      allOf:
        - $ref: '#/components/schemas/ApiResultOk'
        - properties:
            result:
              $ref: '#/components/schemas/User'
    ApiResultOkDeleteUsers:
      allOf:
        - $ref: '#/components/schemas/ApiResultOk'
        - properties:
            result:
              $ref: '#/components/schemas/ApiSubDeleteOk'
    ### list / search
    ApiResultOkGetUsers:
      allOf:
        - $ref: '#/components/schemas/ApiResultOk'
        - properties:
            result:
              $ref: '#/components/schemas/Users'
    # API wrapper base types
    ApiResultOk:
      type: object
      properties:
        version:
          type: string
          example: '0.0.1'
      required:
        - version
    ApiResultError:
      type: object
      properties:
        errorCode:
          type: string
          example: "00001"
        errorMsg:
          type: string
          example: "user with that name already exist"
    ApiSubDeleteOk:
      type: object
      properties:
        deletedId:
          type: integer
          format: int64